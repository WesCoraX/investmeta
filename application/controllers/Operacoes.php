<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */

class Operacoes extends CI_Controller{
	function __construct() {
		parent::__construct();

		if (!$this->ion_auth->logged_in()) {
			redirect('auth/login');
		}

		$this->load->model('Operacao');
		$this->load->helper('data');
		$this->user_id 		= $this->session->user_id;
	} 


	function index() {
		$params['limit'] 		= RECORDS_PER_PAGE; 
		$params['offset'] 		= ($this->input->get('per_page')) ? $this->input->get('per_page') : 0;

		$config 			= $this->config->item('pagination');
		$config['base_url'] 		= site_url('operacoes/index?');
		$config['total_rows'] 		= $this->Operacao->get_all_operacoes_count();
		$this->pagination->initialize($config);

		$data['operacoes'] 		= $this->Operacao->get_all_operacoes($params,$this->user_id);
		$data['_view'] 			= 'operacoes/index';
		$this->load->view('layouts/main',$data);
	}

	function validade_function() {
		$this->form_validation->set_message('validade_function', 'Hello World !');
		return false;
	}


	function add() {   
		$this->load->library('form_validation');

		$this->form_validation->set_rules('ope_saldo','New balance','required|numeric');
		$this->form_validation->set_rules('ope_dia','Day','required|callback_valid_day');
		$this->form_validation->set_rules('ope_campanha','Campaign','required|integer');

		if($this->form_validation->run()) {   
			$params = array(
			                'ope_campanha' 		=> $this->input->post('ope_campanha'),
			                'ope_saldo' 		=> $this->input->post('ope_saldo'),
			                'ope_dia' 		=> data_mysql($this->input->post('ope_dia')),
			                'ope_user' 		=> $this->user_id,
			                );

			$operacoes_id = $this->Operacao->add_operacoes($params);
			redirect('operacoes/index');
		} else {
			$this->load->model('Campanha');
			$data['all_campanhas'] 		= $this->Campanha->get_all_campanhas('',$this->user_id);
			$data['_view'] 			= 'operacoes/add';
			$this->load->view('layouts/main',$data);
		}
	}  


	function edit($ope_id) {   
       		// check if the operacoes exists before trying to edit it
		$data['operacoes'] 		= $this->Operacao->get_operacoes($ope_id);

		if(isset($data['operacoes']['ope_id'])) {
			$this->load->library('form_validation');

			$this->form_validation->set_rules('ope_saldo','New balance','required|numeric');
			$this->form_validation->set_rules('ope_dia','Day','required|callback_valid_day');
			$this->form_validation->set_rules('ope_campanha','Campaign','required|integer');

			if($this->form_validation->run()) {   
				$params = array(
				                'ope_campanha' 		=> $this->input->post('ope_campanha'),
				                'ope_saldo' 		=> $this->input->post('ope_saldo'),
				                'ope_dia' 		=> data_mysql($this->input->post('ope_dia')),
				                );

				$this->Operacao->update_operacoes($ope_id,$params);            
				redirect('operacoes/index');
			} else {
				$this->load->model('Campanha');
				$data['all_campanhas'] 		= $this->Campanha->get_all_campanhas('',$this->user_id);
				$data['_view'] 			= 'operacoes/edit';
				$this->load->view('layouts/main',$data);
			}
		} else {
			show_error('The operacoes you are trying to edit does not exist.');
		}
	} 


	function remove($ope_id) {
		$operacoes 		= $this->Operacao->get_operacoes($ope_id);

        	// check if the operacoes exists before trying to delete it
		if(isset($operacoes['ope_id'])) {
			$this->Operacao->delete_operacoes($ope_id);
			redirect('operacoes/index');
		} else {
			show_error('The operacoes you are trying to delete does not exist.');
		}
	}

	// =====================================================================
	// ADDED
	// =====================================================================
	
	// DATE VALIDATION
	function valid_day($day) {
		$this->load->model('Campanha');
		$campaign 			= $this->Campanha->get_campanha($this->input->post('ope_campanha'));
		$last_oper			= $this->Operacao->get_last_operation($campaign['cam_id']);
		$ope_day 			= strtotime(data_mysql($day));
		$today				= strtotime(date('d/m/Y'));
		$cam_start 			= strtotime($campaign['cam_inicio']);
		$cam_end 			= strtotime($campaign['cam_fim']);
		$ope_last			= strtotime($last_oper['ope_dia']);
		if ($ope_day > $cam_end) {
			$this->form_validation->set_message('valid_day', 'The date can not be bigger than end of campaign '.data_port($campaign['cam_fim']));
			return false;
		}
		if ($ope_day > $today) {
			$this->form_validation->set_message('valid_day', 'The date can not be bigger than today '.date('d/m/Y'));
			return false;
		}
		if ($ope_day < $cam_start) {
			$this->form_validation->set_message('valid_day', 'The date can not be lesser than begin of campaign '.data_port($campaign['cam_inicio']));
			return false;
		}	
		if ($ope_day < $ope_last) {
			$this->form_validation->set_message('valid_day', 'The date can not be lesser than last operation made '.data_port($last_oper['ope_dia']));
			return false;
		}
		return true;	
	}
}
